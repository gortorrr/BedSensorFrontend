import React, { useState } from "react";
import Plot from "react-plotly.js";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { format, addDays, subDays } from "date-fns";

interface TimelineGraphProps {
  data: { time: string; position: string }[];
}

const TimelineGraph: React.FC<TimelineGraphProps> = ({ data }) => {
  const [selectedDate, setSelectedDate] = useState(new Date(2025, 2, 12));

  const statusMapping: { [key: string]: number } = {
    ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏µ‡∏¢‡∏á: 1,
    ‡∏ô‡∏±‡πà‡∏á: 2,
    ‡∏ô‡∏≠‡∏ô‡∏ï‡∏∞‡πÅ‡∏Ñ‡∏á‡∏ã‡πâ‡∏≤‡∏¢: 3,
    ‡∏ô‡∏≠‡∏ô‡∏ï‡∏∞‡πÅ‡∏Ñ‡∏á‡∏Ç‡∏ß‡∏≤: 4,
    ‡∏ô‡∏≠‡∏ô‡∏ï‡∏£‡∏á: 5,
  };

  const statusColors: { [key: string]: string } = {
    ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏µ‡∏¢‡∏á: "#80002a",
    ‡∏ô‡∏±‡πà‡∏á: "#ffcc00",
    ‡∏ô‡∏≠‡∏ô‡∏ï‡∏∞‡πÅ‡∏Ñ‡∏á‡∏ã‡πâ‡∏≤‡∏¢: "#99cc99",
    ‡∏ô‡∏≠‡∏ô‡∏ï‡∏∞‡πÅ‡∏Ñ‡∏á‡∏Ç‡∏ß‡∏≤: "#e63946",
    ‡∏ô‡∏≠‡∏ô‡∏ï‡∏£‡∏á: "#d4e157",
  };

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô format "yyyy-MM-dd"
  const formattedSelectedDate = format(selectedDate, "yyyy-MM-dd");

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredData = data
    .filter((d) => d.time.startsWith(formattedSelectedDate))
    .sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime());

  // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô trace ‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const traces: Plotly.Data[] = Object.keys(statusMapping).map((status) => {
    const statusData = filteredData.filter((d) => d.position === status);

    return {
      x: statusData.map((d) => d.time),
      y: statusData.map((d) => statusMapping[d.position]),
      text: statusData.map(
        (d) =>
          `üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${d.position}<br>üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${format(
            new Date(d.time),
            "HH:mm"
          )}`
      ),
      type: "scatter" as const, // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      mode: "lines+markers",
      name: status,
      marker: {
        color: statusColors[status],
        size: 8,
      },
      line: { shape: "hv" },
      hoverinfo: "x+y+text", // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
    };
  });

  return (
    <div>
      {/* Date Picker */}
      <div style={{ display: "flex", alignItems: "center", marginBottom: 10 }}>
        <span style={{ marginRight: 10 }}>‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏µ</span>
        <DatePicker
          selected={selectedDate}
          onChange={(date) => setSelectedDate(date!)}
          dateFormat="dd/MM/yyyy"
          className="custom-date-picker"
        />
        <button
          onClick={() => setSelectedDate(subDays(selectedDate, 1))}
          style={{ marginLeft: 10, cursor: "pointer" }}
        >
          ¬´
        </button>
        <button
          onClick={() => setSelectedDate(addDays(selectedDate, 1))}
          style={{ marginLeft: 5, cursor: "pointer" }}
        >
          ¬ª
        </button>
      </div>

      {/* ‡∏Å‡∏£‡∏≤‡∏ü */}
      <Plot
        data={traces}
        layout={{
          title: "‚è≥ Timeline ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
          xaxis: {
            title: "‡πÄ‡∏ß‡∏•‡∏≤",
            type: "date",
            range: [
              `${formattedSelectedDate}T00:00:00`,
              `${formattedSelectedDate}T23:59:59`,
            ], // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 00:00 - 24:00
          },
          yaxis: {
            title: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            tickvals: Object.values(statusMapping),
            ticktext: Object.keys(statusMapping),
          },
          legend: { title: { text: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" } }, // ‚úÖ Legend ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          height: 350,
        }}
        useResizeHandler
        style={{ width: "100%" }}
      />

      {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏µ */}
      <div style={{ display: "flex", flexWrap: "wrap", marginTop: 10 }}>
        {Object.entries(statusColors).map(([status]) => (
          <div
            key={status}
            style={{
              display: "flex",
              alignItems: "center",
              marginRight: 15,
              marginBottom: 5,
            }}
          ></div>
        ))}
      </div>
    </div>
  );
};

export default TimelineGraph;
